   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	rgb
  12               	rgb:
  13               	.LFB0:
  14               		.file 1 "main.c"
   1:main.c        **** // Go Cart
   2:main.c        **** // originally Karl van Workum
   3:main.c        **** // modified by Matthew Wigley - 2012
   4:main.c        **** // modified by Nissanka Weerekoon - 2013 (inc: Changed code style to suit Atmel Studio 6 compiler
   5:main.c        **** // - just interrupt related naming conventions)
   6:main.c        **** #include <stdlib.h>
   7:main.c        **** #include <avr/io.h>
   8:main.c        **** #include <avr/interrupt.h>
   9:main.c        **** #include "avrlibdefs.h"
  10:main.c        **** #include "avrlibtypes.h"
  11:main.c        **** #include "board.h"
  12:main.c        **** #include "a2d.h"
  13:main.c        **** #include "timer.h"
  14:main.c        **** 
  15:main.c        ****  //Generate 2.5kHz PWM from 8MHz counter (=8000000/2500)
  16:main.c        **** #define TOP_COUNT (3200)
  17:main.c        **** 
  18:main.c        **** //min duty cycle ~10% (original code uses 3200-150)
  19:main.c        **** #define MAX_COUNT (3000) 
  20:main.c        **** 
  21:main.c        ****  //(2.5+0.625*(140)/150)/5*1024 // 140A (not true)
  22:main.c        **** #define TARGET_CURRENT (620)
  23:main.c        **** //(2.5+0.625*(300)/150)/5*1024  // 300A (not true)
  24:main.c        **** #define MAX_CURRENT (768)
  25:main.c        **** 
  26:main.c        **** //(2.5+0.625*(-50)/150)/5*1024
  27:main.c        **** #define BRAKING_CURRENT 469 // //-50A
  28:main.c        **** 
  29:main.c        **** s32 MAX_AMP_SECONDS = 0.5e5;//(3800*(100)*0.625/150)/5*1024;
  30:main.c        **** 
  31:main.c        **** #define SHUTDOWN sbi(SD_DDR, SD_BIT) //Low output on SD line
  32:main.c        **** #define RESTART cbi(SD_DDR, SD_BIT) //Floating output on SD line
  33:main.c        **** 
  34:main.c        **** 
  35:main.c        **** s32 ampSeconds = 0;
  36:main.c        **** int setpoint = 0;
  37:main.c        **** 
  38:main.c        **** 
  39:main.c        **** //Control the colour of the RGB LED
  40:main.c        **** enum colours {red, green, blue, purple, orange, aqua, white, off};
  41:main.c        **** void rgb(char c)
  42:main.c        **** {
  15               		.loc 1 42 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  43:main.c        **** 	//Turn all off
  44:main.c        **** 	sbi(RGB_PORT, RED);
  22               		.loc 1 44 0
  23 0000 979A      		sbi 0x12,7
  45:main.c        **** 	sbi(RGB_PORT, GREEN);
  24               		.loc 1 45 0
  25 0002 969A      		sbi 0x12,6
  46:main.c        **** 	sbi(RGB_PORT, BLUE);
  26               		.loc 1 46 0
  27 0004 959A      		sbi 0x12,5
  47:main.c        **** 	
  48:main.c        **** 	
  49:main.c        **** 	if(c == red || c == purple || c==orange || c == white)
  28               		.loc 1 49 0
  29 0006 8823      		tst r24
  30 0008 01F0      		breq .L2
  31               		.loc 1 49 0 is_stmt 0 discriminator 1
  32 000a 8330      		cpi r24,lo8(3)
  33 000c 01F0      		breq .L2
  34 000e 8430      		cpi r24,lo8(4)
  35 0010 01F0      		breq .L2
  36 0012 8630      		cpi r24,lo8(6)
  37 0014 01F4      		brne .L3
  38               	.L2:
  50:main.c        **** 	{
  51:main.c        **** 		cbi(RGB_PORT, RED);
  39               		.loc 1 51 0 is_stmt 1
  40 0016 9798      		cbi 0x12,7
  41               	.L3:
  52:main.c        **** 	}
  53:main.c        **** 	
  54:main.c        **** 	if(c == green || c == aqua || c == orange || c == white)
  42               		.loc 1 54 0
  43 0018 8130      		cpi r24,lo8(1)
  44 001a 01F0      		breq .L4
  45               		.loc 1 54 0 is_stmt 0 discriminator 1
  46 001c 8530      		cpi r24,lo8(5)
  47 001e 01F0      		breq .L5
  48 0020 8430      		cpi r24,lo8(4)
  49 0022 01F0      		breq .L5
  50 0024 8630      		cpi r24,lo8(6)
  51 0026 01F0      		breq .L5
  55:main.c        **** 	{
  56:main.c        **** 		cbi(RGB_PORT, GREEN);
  57:main.c        **** 	}
  58:main.c        **** 
  59:main.c        **** 	if(c == blue || c == aqua || c == purple || c == white)
  52               		.loc 1 59 0 is_stmt 1
  53 0028 8230      		cpi r24,lo8(2)
  54 002a 01F0      		breq .L8
  55 002c 8330      		cpi r24,lo8(3)
  56 002e 01F0      		breq .L8
  57               	.L1:
  58 0030 0895      		ret
  59               	.L5:
  56:main.c        **** 		cbi(RGB_PORT, GREEN);
  60               		.loc 1 56 0
  61 0032 9698      		cbi 0x12,6
  62               		.loc 1 59 0
  63 0034 8530      		cpi r24,lo8(5)
  64 0036 01F0      		breq .L8
  65 0038 8330      		cpi r24,lo8(3)
  66 003a 01F0      		breq .L8
  67               		.loc 1 59 0 is_stmt 0 discriminator 1
  68 003c 8630      		cpi r24,lo8(6)
  69 003e 01F4      		brne .L1
  70               	.L8:
  60:main.c        **** 	{
  61:main.c        **** 		cbi(RGB_PORT, BLUE);
  71               		.loc 1 61 0 is_stmt 1
  72 0040 9598      		cbi 0x12,5
  73 0042 0895      		ret
  74               	.L4:
  56:main.c        **** 		cbi(RGB_PORT, GREEN);
  75               		.loc 1 56 0
  76 0044 9698      		cbi 0x12,6
  77 0046 0895      		ret
  78               		.cfi_endproc
  79               	.LFE0:
  81               	.global	__vector_10
  83               	__vector_10:
  84               	.LFB1:
  62:main.c        **** 	}
  63:main.c        **** 
  64:main.c        **** } 
  65:main.c        **** 
  66:main.c        **** 
  67:main.c        **** //unsigned char i = 0;
  68:main.c        **** ISR(SPI_STC_vect) {    
  85               		.loc 1 68 0
  86               		.cfi_startproc
  87 0048 1F92      		push r1
  88               	.LCFI0:
  89               		.cfi_def_cfa_offset 3
  90               		.cfi_offset 1, -2
  91 004a 0F92      		push r0
  92               	.LCFI1:
  93               		.cfi_def_cfa_offset 4
  94               		.cfi_offset 0, -3
  95 004c 0FB6      		in r0,__SREG__
  96 004e 0F92      		push r0
  97 0050 1124      		clr __zero_reg__
  98 0052 2F93      		push r18
  99               	.LCFI2:
 100               		.cfi_def_cfa_offset 5
 101               		.cfi_offset 18, -4
 102 0054 3F93      		push r19
 103               	.LCFI3:
 104               		.cfi_def_cfa_offset 6
 105               		.cfi_offset 19, -5
 106 0056 4F93      		push r20
 107               	.LCFI4:
 108               		.cfi_def_cfa_offset 7
 109               		.cfi_offset 20, -6
 110 0058 5F93      		push r21
 111               	.LCFI5:
 112               		.cfi_def_cfa_offset 8
 113               		.cfi_offset 21, -7
 114 005a 6F93      		push r22
 115               	.LCFI6:
 116               		.cfi_def_cfa_offset 9
 117               		.cfi_offset 22, -8
 118 005c 7F93      		push r23
 119               	.LCFI7:
 120               		.cfi_def_cfa_offset 10
 121               		.cfi_offset 23, -9
 122 005e 8F93      		push r24
 123               	.LCFI8:
 124               		.cfi_def_cfa_offset 11
 125               		.cfi_offset 24, -10
 126 0060 9F93      		push r25
 127               	.LCFI9:
 128               		.cfi_def_cfa_offset 12
 129               		.cfi_offset 25, -11
 130 0062 AF93      		push r26
 131               	.LCFI10:
 132               		.cfi_def_cfa_offset 13
 133               		.cfi_offset 26, -12
 134 0064 BF93      		push r27
 135               	.LCFI11:
 136               		.cfi_def_cfa_offset 14
 137               		.cfi_offset 27, -13
 138               	/* prologue: Signal */
 139               	/* frame size = 0 */
 140               	/* stack size = 13 */
 141               	.L__stack_usage = 13
  69:main.c        **** 	setpoint = (((unsigned long)SPDR)*TOP_COUNT)/256;
 142               		.loc 1 69 0
 143 0066 2FB1      		in r18,0xf
 144 0068 30E0      		ldi r19,0
 145 006a A0E8      		ldi r26,lo8(-128)
 146 006c BCE0      		ldi r27,lo8(12)
 147 006e 00D0      		rcall __umulhisi3
 148 0070 BB27      		clr r27
 149 0072 A92F      		mov r26,r25
 150 0074 982F      		mov r25,r24
 151 0076 872F      		mov r24,r23
  70:main.c        ****     if (setpoint > MAX_COUNT) {
 152               		.loc 1 70 0
 153 0078 893B      		cpi r24,-71
 154 007a 2BE0      		ldi r18,11
 155 007c 9207      		cpc r25,r18
 156 007e 04F0      		brlt .L51
  71:main.c        ****         setpoint = MAX_COUNT;
 157               		.loc 1 71 0
 158 0080 88EB      		ldi r24,lo8(-72)
 159 0082 9BE0      		ldi r25,lo8(11)
 160               	.L51:
 161 0084 9093 0000 		sts setpoint+1,r25
 162 0088 8093 0000 		sts setpoint,r24
 163               	/* epilogue start */
  72:main.c        ****     }
  73:main.c        **** }
 164               		.loc 1 73 0
 165 008c BF91      		pop r27
 166 008e AF91      		pop r26
 167 0090 9F91      		pop r25
 168 0092 8F91      		pop r24
 169 0094 7F91      		pop r23
 170 0096 6F91      		pop r22
 171 0098 5F91      		pop r21
 172 009a 4F91      		pop r20
 173 009c 3F91      		pop r19
 174 009e 2F91      		pop r18
 175 00a0 0F90      		pop r0
 176 00a2 0FBE      		out __SREG__,r0
 177 00a4 0F90      		pop r0
 178 00a6 1F90      		pop r1
 179 00a8 1895      		reti
 180               		.cfi_endproc
 181               	.LFE1:
 183               	.global	init
 185               	init:
 186               	.LFB2:
  74:main.c        **** 
  75:main.c        **** 
  76:main.c        **** void init(void)
  77:main.c        **** {
 187               		.loc 1 77 0
 188               		.cfi_startproc
 189               	/* prologue: function */
 190               	/* frame size = 0 */
 191               	/* stack size = 0 */
 192               	.L__stack_usage = 0
  78:main.c        **** 	//Make outputs low
  79:main.c        **** 	cbi(PWM_PORT, PWM_BIT);
 193               		.loc 1 79 0
 194 00aa C198      		cbi 0x18,1
  80:main.c        **** 	cbi(SD_PORT, SD_BIT); //CHANGED - used to be using PWM_BIT don't know why
 195               		.loc 1 80 0
 196 00ac 9498      		cbi 0x12,4
  81:main.c        **** 	
  82:main.c        **** 	//Make outputs outputs
  83:main.c        **** 	sbi(PWM_DDR, PWM_BIT);
 197               		.loc 1 83 0
 198 00ae B99A      		sbi 0x17,1
  84:main.c        **** 
  85:main.c        **** 	//Pull-up switches
  86:main.c        **** 	sbi(ESTOP_PORT, ESTOP_BIT);
 199               		.loc 1 86 0
 200 00b0 939A      		sbi 0x12,3
  87:main.c        **** 	sbi(BRAKE_PORT, BRAKE_BIT);
 201               		.loc 1 87 0
 202 00b2 929A      		sbi 0x12,2
  88:main.c        **** 	
  89:main.c        **** 	//RGB Outputs
  90:main.c        **** 	sbi(RGB_DDR, RED);
 203               		.loc 1 90 0
 204 00b4 8F9A      		sbi 0x11,7
  91:main.c        **** 	sbi(RGB_DDR, GREEN);
 205               		.loc 1 91 0
 206 00b6 8E9A      		sbi 0x11,6
  92:main.c        **** 	sbi(RGB_DDR, BLUE);
 207               		.loc 1 92 0
 208 00b8 8D9A      		sbi 0x11,5
  93:main.c        **** 	
  94:main.c        **** 	//RGB Off
  95:main.c        **** 	sbi(RGB_PORT, RED);
 209               		.loc 1 95 0
 210 00ba 979A      		sbi 0x12,7
  96:main.c        **** 	sbi(RGB_PORT, GREEN);
 211               		.loc 1 96 0
 212 00bc 969A      		sbi 0x12,6
  97:main.c        **** 	sbi(RGB_PORT, BLUE);
 213               		.loc 1 97 0
 214 00be 959A      		sbi 0x12,5
  98:main.c        **** 	
  99:main.c        **** 	//Initialise the ADC 
 100:main.c        **** 	a2dInit();
 215               		.loc 1 100 0
 216 00c0 00D0      		rcall a2dInit
 217               	.LVL1:
 101:main.c        **** 	
 102:main.c        **** 	//Initialise timer 1
 103:main.c        **** 	timer1Init();
 218               		.loc 1 103 0
 219 00c2 00D0      		rcall timer1Init
 220               	.LVL2:
 104:main.c        **** 	timer1SetPrescaler(TIMER_CLK_DIV1);
 221               		.loc 1 104 0
 222 00c4 81E0      		ldi r24,lo8(1)
 223 00c6 00D0      		rcall timer1SetPrescaler
 224               	.LVL3:
 105:main.c        **** 	timer1PWMInitICR(TOP_COUNT); //Enable PWM with top count
 225               		.loc 1 105 0
 226 00c8 80E8      		ldi r24,lo8(-128)
 227 00ca 9CE0      		ldi r25,lo8(12)
 228 00cc 00D0      		rcall timer1PWMInitICR
 229               	.LVL4:
 106:main.c        **** 	timer1PWMAOn(); //Turn PWM on
 230               		.loc 1 106 0
 231 00ce 00D0      		rcall timer1PWMAOn
 232               	.LVL5:
 107:main.c        **** 
 108:main.c        **** 	// Set MISO as output, all others as input
 109:main.c        **** 	sbi(SPI_DDR, MISO_BIT);
 233               		.loc 1 109 0
 234 00d0 BC9A      		sbi 0x17,4
 110:main.c        **** 
 111:main.c        **** 	// Set the clock phase
 112:main.c        **** 	sbi(SPCR, CPHA);
 235               		.loc 1 112 0
 236 00d2 6A9A      		sbi 0xd,2
 113:main.c        **** 
 114:main.c        **** 	// Enable the SPI
 115:main.c        **** 	sbi(SPCR, SPE);
 237               		.loc 1 115 0
 238 00d4 6E9A      		sbi 0xd,6
 116:main.c        **** 
 117:main.c        **** 	// Enable the SPI interrupt
 118:main.c        **** 	sbi(SPCR, SPIE);
 239               		.loc 1 118 0
 240 00d6 6F9A      		sbi 0xd,7
 119:main.c        **** 
 120:main.c        **** 	rgb(green);
 241               		.loc 1 120 0
 242 00d8 81E0      		ldi r24,lo8(1)
 243 00da 00D0      		rcall rgb
 244               	.LVL6:
 121:main.c        **** 
 122:main.c        **** 	sei(); //Enable interupts
 245               		.loc 1 122 0
 246               	/* #APP */
 247               	 ;  122 "main.c" 1
 248 00dc 7894      		sei
 249               	 ;  0 "" 2
 250               	/* #NOAPP */
 251 00de 0895      		ret
 252               		.cfi_endproc
 253               	.LFE2:
 255               		.section	.text.startup,"ax",@progbits
 256               	.global	main
 258               	main:
 259               	.LFB3:
 123:main.c        **** }
 124:main.c        **** 
 125:main.c        **** 
 126:main.c        **** int main(void)
 127:main.c        **** {
 260               		.loc 1 127 0
 261               		.cfi_startproc
 262               	/* prologue: function */
 263               	/* frame size = 0 */
 264               	/* stack size = 0 */
 265               	.L__stack_usage = 0
 128:main.c        **** 
 129:main.c        **** 	init(); //Initialise things
 266               		.loc 1 129 0
 267 0000 00D0      		rcall init
 268               	.LVL7:
 269               	.LBB2:
 270               	.LBB3:
 271               	.LBB4:
 130:main.c        **** 	for(;;)
 131:main.c        **** 	{
 132:main.c        **** 		//Check the estop
 133:main.c        **** 		if(ESTOP_PRESSED)
 134:main.c        **** 		{
 135:main.c        **** 			//Wait until it is released
 136:main.c        **** 			while(ESTOP_PRESSED || BRAKE_PRESSED)
 137:main.c        **** 			{
 138:main.c        **** 				SHUTDOWN;
 139:main.c        **** 				rgb(red);
 140:main.c        **** 				//timer1PWMAOff(); //Stop PWM
 141:main.c        **** 				delay_us(100); //Wait
 142:main.c        **** 			}
 143:main.c        **** 			RESTART;
 144:main.c        **** 			rgb(green);
 145:main.c        **** 			//timer1PWMA(); //Restart PWM
 146:main.c        **** 		}
 147:main.c        **** 			
 148:main.c        **** 		if(BRAKE_PRESSED)
 149:main.c        **** 		{
 150:main.c        **** 			//Start at the current duty cycle
 151:main.c        **** 			s16 braking_duty = setpoint;
 152:main.c        **** 				
 153:main.c        **** 			//While the brake pedal is pressed do regenerative braking
 154:main.c        **** 			while(BRAKE_PRESSED)
 155:main.c        **** 			{
 156:main.c        **** 				rgb(purple);
 157:main.c        **** 					
 158:main.c        **** 				//Read the average current value
 159:main.c        **** 				s16 current = a2dConvert10bit(AVG_CURRENT_PIN);
 160:main.c        **** 					
 161:main.c        **** 				//Calculate the error from the target braking current
 162:main.c        **** 				s16 error = BRAKING_CURRENT - current;
 272               		.loc 1 162 0
 273 0002 35ED      		ldi r19,lo8(-43)
 274 0004 E32E      		mov r14,r19
 275 0006 FF24      		clr r15
 276 0008 F394      		inc r15
 163:main.c        **** 					
 164:main.c        **** 				//Scale the error and add to braking duty
 165:main.c        **** 				braking_duty += error/10;
 277               		.loc 1 165 0
 278 000a 0AE0      		ldi r16,lo8(10)
 279 000c 10E0      		ldi r17,0
 166:main.c        **** 					
 167:main.c        **** 				//Stop the duty from going negative
 168:main.c        **** 				if(braking_duty < 0)
 169:main.c        **** 				{
 170:main.c        **** 					braking_duty = 0;
 171:main.c        **** 				}
 172:main.c        **** 					
 173:main.c        **** 				//Set the PWM duty
 174:main.c        **** 				timer1PWMASet(TOP_COUNT - braking_duty); //inverted
 280               		.loc 1 174 0
 281 000e C0E8      		ldi r28,lo8(-128)
 282 0010 DCE0      		ldi r29,lo8(12)
 283               	.L67:
 284               	.LBE4:
 285               	.LBE3:
 133:main.c        **** 		if(ESTOP_PRESSED)
 286               		.loc 1 133 0
 287 0012 839B      		sbis 0x10,3
 288 0014 00C0      		rjmp .L80
 289               	.L55:
 148:main.c        **** 		if(BRAKE_PRESSED)
 290               		.loc 1 148 0
 291 0016 8299      		sbic 0x10,2
 292 0018 00C0      		rjmp .L57
 293               	.LBB7:
 151:main.c        **** 			s16 braking_duty = setpoint;
 294               		.loc 1 151 0
 295 001a A090 0000 		lds r10,setpoint
 296 001e B090 0000 		lds r11,setpoint+1
 297               	.LVL8:
 154:main.c        **** 			while(BRAKE_PRESSED)
 298               		.loc 1 154 0
 299 0022 829B      		sbis 0x10,2
 300 0024 00C0      		rjmp .L78
 301 0026 00C0      		rjmp .L61
 302               	.LVL9:
 303               	.L59:
 304               	.LBB5:
 305               		.loc 1 174 0
 306 0028 CE01      		movw r24,r28
 307 002a 8A19      		sub r24,r10
 308 002c 9B09      		sbc r25,r11
 309 002e 00D0      		rcall timer1PWMASet
 310               	.LVL10:
 311               	.LBE5:
 154:main.c        **** 			while(BRAKE_PRESSED)
 312               		.loc 1 154 0
 313 0030 8299      		sbic 0x10,2
 314 0032 00C0      		rjmp .L61
 315               	.L78:
 316               	.LBB6:
 156:main.c        **** 				rgb(purple);
 317               		.loc 1 156 0
 318 0034 83E0      		ldi r24,lo8(3)
 319 0036 00D0      		rcall rgb
 320               	.LVL11:
 159:main.c        **** 				s16 current = a2dConvert10bit(AVG_CURRENT_PIN);
 321               		.loc 1 159 0
 322 0038 81E0      		ldi r24,lo8(1)
 323 003a 00D0      		rcall a2dConvert10bit
 324               	.LVL12:
 162:main.c        **** 				s16 error = BRAKING_CURRENT - current;
 325               		.loc 1 162 0
 326 003c 9701      		movw r18,r14
 327 003e 281B      		sub r18,r24
 328 0040 390B      		sbc r19,r25
 329 0042 C901      		movw r24,r18
 330               	.LVL13:
 165:main.c        **** 				braking_duty += error/10;
 331               		.loc 1 165 0
 332 0044 B801      		movw r22,r16
 333 0046 00D0      		rcall __divmodhi4
 334 0048 A60E      		add r10,r22
 335 004a B71E      		adc r11,r23
 336               	.LVL14:
 337 004c B7FE      		sbrs r11,7
 338 004e 00C0      		rjmp .L59
 339 0050 A12C      		mov r10,__zero_reg__
 340 0052 B12C      		mov r11,__zero_reg__
 341               	.LVL15:
 342               		.loc 1 174 0
 343 0054 CE01      		movw r24,r28
 344 0056 8A19      		sub r24,r10
 345 0058 9B09      		sbc r25,r11
 346 005a 00D0      		rcall timer1PWMASet
 347               	.LVL16:
 348               	.LBE6:
 154:main.c        **** 			while(BRAKE_PRESSED)
 349               		.loc 1 154 0
 350 005c 829B      		sbis 0x10,2
 351 005e 00C0      		rjmp .L78
 352               	.L61:
 175:main.c        **** 				
 176:main.c        **** 			}
 177:main.c        **** 			rgb(green);
 353               		.loc 1 177 0
 354 0060 81E0      		ldi r24,lo8(1)
 355 0062 00D0      		rcall rgb
 356               	.LVL17:
 357               	.L57:
 358               	.LBE7:
 178:main.c        **** 		}
 179:main.c        **** 			
 180:main.c        **** 		//Check the average current
 181:main.c        **** 		int current = a2dConvert10bit(AVG_CURRENT_PIN);
 359               		.loc 1 181 0
 360 0064 81E0      		ldi r24,lo8(1)
 361 0066 00D0      		rcall a2dConvert10bit
 362               	.LVL18:
 363 0068 9C01      		movw r18,r24
 364               	.LVL19:
 182:main.c        **** 			
 183:main.c        **** 		//Accumulate the amp-seconds the current is above the target current
 184:main.c        **** 		ampSeconds += (current - TARGET_CURRENT);
 365               		.loc 1 184 0
 366 006a AC01      		movw r20,r24
 367 006c 4C56      		subi r20,108
 368 006e 5240      		sbci r21,2
 369 0070 6627      		clr r22
 370 0072 57FD      		sbrc r21,7
 371 0074 6095      		com r22
 372 0076 762F      		mov r23,r22
 373 0078 8091 0000 		lds r24,ampSeconds
 374 007c 9091 0000 		lds r25,ampSeconds+1
 375 0080 A091 0000 		lds r26,ampSeconds+2
 376 0084 B091 0000 		lds r27,ampSeconds+3
 377 0088 480F      		add r20,r24
 378 008a 591F      		adc r21,r25
 379 008c 6A1F      		adc r22,r26
 380 008e 7B1F      		adc r23,r27
 185:main.c        **** 			
 186:main.c        **** 		//Stop the amp-seconds from going negative
 187:main.c        **** 		if(ampSeconds < 0) 
 381               		.loc 1 187 0
 382 0090 77FD      		sbrc r23,7
 383 0092 00C0      		rjmp .L62
 184:main.c        **** 		ampSeconds += (current - TARGET_CURRENT);
 384               		.loc 1 184 0
 385 0094 4093 0000 		sts ampSeconds,r20
 386 0098 5093 0000 		sts ampSeconds+1,r21
 387 009c 6093 0000 		sts ampSeconds+2,r22
 388 00a0 7093 0000 		sts ampSeconds+3,r23
 389               	.L63:
 188:main.c        **** 		{
 189:main.c        **** 			ampSeconds = 0;
 190:main.c        **** 		}
 191:main.c        **** 			
 192:main.c        **** 		//Shut down the controller if the current exceeds the maximum current
 193:main.c        **** 		// or the amp-seconds has exceeded the maximum allowable value
 194:main.c        **** 		if(ampSeconds > MAX_AMP_SECONDS || current > MAX_CURRENT)		
 390               		.loc 1 194 0
 391 00a4 8090 0000 		lds r8,MAX_AMP_SECONDS
 392 00a8 9090 0000 		lds r9,MAX_AMP_SECONDS+1
 393 00ac A090 0000 		lds r10,MAX_AMP_SECONDS+2
 394 00b0 B090 0000 		lds r11,MAX_AMP_SECONDS+3
 395 00b4 8416      		cp r8,r20
 396 00b6 9506      		cpc r9,r21
 397 00b8 A606      		cpc r10,r22
 398 00ba B706      		cpc r11,r23
 399 00bc 04F0      		brlt .L64
 400               		.loc 1 194 0 is_stmt 0 discriminator 1
 401 00be 2130      		cpi r18,1
 402 00c0 3340      		sbci r19,3
 403 00c2 04F0      		brlt .L65
 404               	.L64:
 195:main.c        **** 		{
 196:main.c        **** 			SHUTDOWN;
 405               		.loc 1 196 0 is_stmt 1
 406 00c4 8C9A      		sbi 0x11,4
 197:main.c        **** 			rgb(blue);
 407               		.loc 1 197 0
 408 00c6 82E0      		ldi r24,lo8(2)
 409 00c8 00D0      		rcall rgb
 410               	.LVL20:
 411               	.L66:
 198:main.c        **** 		}
 199:main.c        **** 		else 
 200:main.c        **** 		{
 201:main.c        **** 			RESTART;
 202:main.c        **** 			rgb(green);
 203:main.c        **** 		}		
 204:main.c        **** 	
 205:main.c        **** 		//Set the PWM Duty
 206:main.c        **** 		timer1PWMASet(TOP_COUNT - setpoint); //inverted
 412               		.loc 1 206 0
 413 00ca 8091 0000 		lds r24,setpoint
 414 00ce 9091 0000 		lds r25,setpoint+1
 415 00d2 9E01      		movw r18,r28
 416 00d4 281B      		sub r18,r24
 417 00d6 390B      		sbc r19,r25
 418 00d8 C901      		movw r24,r18
 419 00da 00D0      		rcall timer1PWMASet
 420               	.LVL21:
 421               	.LBE2:
 207:main.c        **** 	}
 422               		.loc 1 207 0
 423 00dc 00C0      		rjmp .L67
 424               	.L56:
 425               	.LBB8:
 138:main.c        **** 				SHUTDOWN;
 426               		.loc 1 138 0
 427 00de 8C9A      		sbi 0x11,4
 139:main.c        **** 				rgb(red);
 428               		.loc 1 139 0
 429 00e0 80E0      		ldi r24,0
 430 00e2 00D0      		rcall rgb
 431               	.LVL22:
 141:main.c        **** 				delay_us(100); //Wait
 432               		.loc 1 141 0
 433 00e4 84E6      		ldi r24,lo8(100)
 434 00e6 90E0      		ldi r25,0
 435 00e8 00D0      		rcall delay_us
 436               	.LVL23:
 437               	.L80:
 136:main.c        **** 			while(ESTOP_PRESSED || BRAKE_PRESSED)
 438               		.loc 1 136 0 discriminator 1
 439 00ea 839B      		sbis 0x10,3
 440 00ec 00C0      		rjmp .L56
 136:main.c        **** 			while(ESTOP_PRESSED || BRAKE_PRESSED)
 441               		.loc 1 136 0 is_stmt 0 discriminator 2
 442 00ee 829B      		sbis 0x10,2
 443 00f0 00C0      		rjmp .L56
 143:main.c        **** 			RESTART;
 444               		.loc 1 143 0 is_stmt 1
 445 00f2 8C98      		cbi 0x11,4
 144:main.c        **** 			rgb(green);
 446               		.loc 1 144 0
 447 00f4 81E0      		ldi r24,lo8(1)
 448 00f6 00D0      		rcall rgb
 449               	.LVL24:
 450 00f8 00C0      		rjmp .L55
 451               	.LVL25:
 452               	.L62:
 189:main.c        **** 			ampSeconds = 0;
 453               		.loc 1 189 0
 454 00fa 1092 0000 		sts ampSeconds,__zero_reg__
 455 00fe 1092 0000 		sts ampSeconds+1,__zero_reg__
 456 0102 1092 0000 		sts ampSeconds+2,__zero_reg__
 457 0106 1092 0000 		sts ampSeconds+3,__zero_reg__
 458 010a 40E0      		ldi r20,0
 459 010c 50E0      		ldi r21,0
 460 010e BA01      		movw r22,r20
 461 0110 00C0      		rjmp .L63
 462               	.L65:
 201:main.c        **** 			RESTART;
 463               		.loc 1 201 0
 464 0112 8C98      		cbi 0x11,4
 202:main.c        **** 			rgb(green);
 465               		.loc 1 202 0
 466 0114 81E0      		ldi r24,lo8(1)
 467 0116 00D0      		rcall rgb
 468               	.LVL26:
 469 0118 00C0      		rjmp .L66
 470               	.LBE8:
 471               		.cfi_endproc
 472               	.LFE3:
 474               	.global	setpoint
 475               		.section .bss
 478               	setpoint:
 479 0000 0000      		.zero	2
 480               	.global	ampSeconds
 483               	ampSeconds:
 484 0002 0000 0000 		.zero	4
 485               	.global	MAX_AMP_SECONDS
 486               		.data
 489               	MAX_AMP_SECONDS:
 490 0000 50        		.byte	80
 491 0001 C3        		.byte	-61
 492 0002 00        		.byte	0
 493 0003 00        		.byte	0
 494               		.text
 495               	.Letext0:
 496               		.file 2 "c:\\program files (x86)\\atmel\\atmel toolchain\\avr8 gcc\\native\\3.4.2.939\\avr8-gnu-to
 497               		.file 3 "avrlibtypes.h"
 498               		.file 4 "a2d.h"
 499               		.file 5 "timer.h"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\Nissanka\AppData\Local\Temp\ccIXa6Oh.s:2      *ABS*:0000003e __SP_H__
C:\Users\Nissanka\AppData\Local\Temp\ccIXa6Oh.s:3      *ABS*:0000003d __SP_L__
C:\Users\Nissanka\AppData\Local\Temp\ccIXa6Oh.s:4      *ABS*:0000003f __SREG__
C:\Users\Nissanka\AppData\Local\Temp\ccIXa6Oh.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\Nissanka\AppData\Local\Temp\ccIXa6Oh.s:6      *ABS*:00000001 __zero_reg__
C:\Users\Nissanka\AppData\Local\Temp\ccIXa6Oh.s:12     .text:00000000 rgb
C:\Users\Nissanka\AppData\Local\Temp\ccIXa6Oh.s:83     .text:00000048 __vector_10
C:\Users\Nissanka\AppData\Local\Temp\ccIXa6Oh.s:478    .bss:00000000 setpoint
C:\Users\Nissanka\AppData\Local\Temp\ccIXa6Oh.s:185    .text:000000aa init
C:\Users\Nissanka\AppData\Local\Temp\ccIXa6Oh.s:258    .text.startup:00000000 main
C:\Users\Nissanka\AppData\Local\Temp\ccIXa6Oh.s:483    .bss:00000002 ampSeconds
C:\Users\Nissanka\AppData\Local\Temp\ccIXa6Oh.s:489    .data:00000000 MAX_AMP_SECONDS

UNDEFINED SYMBOLS
__umulhisi3
a2dInit
timer1Init
timer1SetPrescaler
timer1PWMInitICR
timer1PWMAOn
timer1PWMASet
a2dConvert10bit
__divmodhi4
delay_us
__do_copy_data
__do_clear_bss
